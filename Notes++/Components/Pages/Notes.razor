@page "/notes"
@using Notes__.Utilities
@inject LayoutService LayoutService


<div class="dropdown">
    <button class="dropbtn" @onclick="ToggleDropdown">New Note Page</button>
    <div class="dropdown-content" style="@(isOpen ? "display: block;" : "display: none;")">
        <button @onclick="CreateBasicNotePage">@createNotePageText</button>
    </div>
</div>

<div class="input-container">
    <input @bind="newNote" @oninput="OnSearchInput" @onkeydown="HandleKeyPress" placeholder="Search or write a note..." />
    @* <button @onclick="AddNoteOrEditNote">@addOrEditButtonText</button> *@
</div>

<ul>
    @foreach (var note in filteredNotes)
    {
        <li class="note">
            <span class="note-text">@note</span>
            <div class="buttons">
                <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                <button class="delete-button" @onclick="() => DeleteNote(note)">Delete</button>
            </div>
        </li>
    }
</ul>

@code {
    enum EFormat
    {
        BASIC,
        BULLETPOINT,
        NUMBERED
    }

    private List<string> notes = new();
    private List<string> filteredNotes = new();
    private string newNote = "";
    private string searchText = "";
    private string currentNoteToEdit = null; // Store the note being edited
    private string addOrEditButtonText = "Add Note"; // Button text for Add or Edit
    private string createNotePageText = "Create New Basic Note Page";
    private bool isOpen = false;
    private EFormat format = EFormat.BASIC;

    private static string basePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Notes++");


    private void ToggleDropdown()
    {
        isOpen = !isOpen;
    }

    // When the user types in the input field, search and add functionality is triggered
    void OnSearchInput(ChangeEventArgs e)
    {
        newNote = e.Value.ToString();
        FilterNotes();
    }

    // Handles Enter key press for adding or editing the note
    void HandleKeyPress(KeyboardEventArgs e)
    {
        LoadNoteFromFile();
        if (e.Key == "Enter")
        {
            AddNoteOrEditNote();
        }
    }

    // Adds the note or edits the existing one depending on the context
    void AddNoteOrEditNote()
    {
        if (!string.IsNullOrWhiteSpace(newNote))
        {
            if (currentNoteToEdit != null)
            {
                // Edit existing note
                int index = notes.IndexOf(currentNoteToEdit);
                notes[index] = newNote;
                currentNoteToEdit = null; // Reset edit context
                addOrEditButtonText = "Add Note"; // Reset button text
            }
            else
            {
                // Add new note
                notes.Add(newNote);
            }
            newNote = "";
            SaveNoteToFile();
            FilterNotes();
        }
    }

    void SaveNoteToFile()
    {
        string filePath = Path.Combine(basePath, $"{LayoutService.PageTitle}.txt");

        Directory.CreateDirectory(basePath);

        File.WriteAllLines(filePath, notes);
    }

    void LoadNoteFromFile()
    {
        string filePath = Path.Combine(basePath, $"{LayoutService.PageTitle}.txt");

        if (File.Exists(filePath))
        {
            notes = new List<string>(File.ReadAllLines(filePath));
        }
        else
        {
            notes = new List<string>(); // Avoid null reference errors
        }
    }


    // Filter notes based on the search input
    void FilterNotes()
    {
        if (string.IsNullOrEmpty(newNote))
        {
            filteredNotes = notes;
        }
        else
        {
            filteredNotes = notes.Where(n => n.Contains(newNote, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    // Allow editing by placing the note text into the input box
    void EditNote(string note)
    {
        newNote = note;
        currentNoteToEdit = note; // Set the note being edited
        addOrEditButtonText = "Save Changes"; // Change button text to "Save Changes"
    }

    // Delete the selected note
    void DeleteNote(string note)
    {
        notes.Remove(note);
        SaveNoteToFile();
        FilterNotes(); // Reapply filter after deletion
    }

    // Creates a new note page
    void CreateBasicNotePage()
    {
        format = EFormat.BASIC;
        filteredNotes.Clear();
    }
}
