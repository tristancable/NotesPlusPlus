@page "/note/{folderName}/{fileName}"
@using Notes__.Utilities
@inject FolderService FolderService
@inject LayoutService LayoutService
@inject NavigationManager Navigation

<div class="input-container">
    <input @bind="newNote" @oninput="OnSearchInput" @onkeydown="HandleKeyPress" placeholder="Search or write a note..." />
</div>

<ul>
    @foreach (var note in filteredNotes)
    {
        <li class="note">
            <span class="note-text">@note</span>
            <div class="buttons">
                <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                <button class="delete-button" @onclick="() => DeleteNote(note)">Delete</button>
            </div>
        </li>
    }
</ul>

@code {
    [Parameter] public string folderName { get; set; }
    [Parameter] public string fileName { get; set; }

    private List<string> notes = new();
    private List<string> filteredNotes = new();
    private string newNote = "";
    private string currentNoteToEdit = null;
    private string addOrEditButtonText = "Add Note";

    protected override void OnInitialized()
    {
        // This will be called when the page is first initialized
        if (!string.IsNullOrWhiteSpace(folderName) && !string.IsNullOrWhiteSpace(fileName))
        {
            LoadFile(); // Load the file content
        }
    }

    void OnSearchInput(ChangeEventArgs e)
    {
        newNote = e.Value.ToString();
        FilterNotes();
    }

    void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddNoteOrEditNote();
    }

    void AddNoteOrEditNote()
    {
        if (!string.IsNullOrWhiteSpace(newNote))
        {
            if (currentNoteToEdit != null)
            {
                // Edit existing note
                int index = -1;
                switch (LayoutService.Format)
                {
                    case LayoutService.EFormat.BULLETPOINT:
                        index = notes.IndexOf("• " + currentNoteToEdit);
                        break;
                    case LayoutService.EFormat.NUMBERED:
                        index = notes.IndexOf($"{LayoutService.EditNumber}." + currentNoteToEdit);
                        break;
                    default:
                        index = notes.IndexOf(currentNoteToEdit);
                        break;
                }
                switch (LayoutService.Format)
                {
                    case LayoutService.EFormat.BULLETPOINT:
                        notes[index] = "• " + newNote;
                        break;
                    case LayoutService.EFormat.NUMBERED:
                        notes[index] = $"{index + 1}. " + newNote;
                        break;
                    default:
                        notes[index] = newNote;
                        break;
                }
                currentNoteToEdit = null; // Reset edit context
                addOrEditButtonText = "Add Note"; // Reset button text
            }
            else
            {
                switch (LayoutService.Format)
                {
                    case LayoutService.EFormat.BULLETPOINT:
                        notes.Add("• " + newNote);
                        break;
                    case LayoutService.EFormat.NUMBERED:
                        notes.Add($"{notes.Count() + 1}. " + newNote);
                        break;
                    default:
                        notes.Add(newNote);
                        break;
                }
            }
            newNote = "";
            SaveFile();
            FilterNotes();
        }
    }

    // This is the method that loads the file content
    void LoadFile()
    {
        if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
        {
            fileName += ".txt";
        }

        var content = FolderService.ReadFileContent(folderName, fileName);
        Console.WriteLine($"Reading from: {folderName}/{fileName}");
        Console.WriteLine($"File Content: {content}");

        notes = string.IsNullOrWhiteSpace(content) ? new List<string>() : new List<string>(content.Split('\n'));
        FilterNotes();
        StateHasChanged(); // Ensure UI updates after loading file
    }

    void SaveFile()
    {
        FolderService.SaveFileContent(folderName, fileName, string.Join("\n", notes));
    }

    void FilterNotes()
    {
        filteredNotes = string.IsNullOrEmpty(newNote) ? notes :
            notes.Where(n => n.Contains(newNote, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    void EditNote(string note)
    {
        if (LayoutService.Format == LayoutService.EFormat.BULLETPOINT)
        {
            newNote = note.Substring(2);
            currentNoteToEdit = note.Substring(2);

        }
        else if (LayoutService.Format == LayoutService.EFormat.NUMBERED)
        {
            int n;
            int.TryParse(note.Substring(0, 1), out n);
            LayoutService.EditNumber = n;
            newNote = note.Substring(2);
            currentNoteToEdit = note.Substring(2);
        }
        else
        {
            newNote = note;
            currentNoteToEdit = note; // Set the note being edited
        }
        addOrEditButtonText = "Save Changes"; // Change button text to "Save Changes"
    }

    void DeleteNote(string note)
    {
        notes.Remove(note);
        if (LayoutService.Format == LayoutService.EFormat.NUMBERED)
        {
            for (int i = 0; i < notes.Count(); i++)
            {
                string n = notes[i].Substring(1, notes[i].Length - 1);
                notes[i] = $"{i + 1}{n}";
            }
        }
        SaveFile();
        FilterNotes(); // Reapply filter after deletion
    }
}