@page "/note/{folderName}/{fileName}"
@using Notes__.Utilities
@inject FolderService FolderService
@inject LayoutService LayoutService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="input-container">
    <input @bind="newNote" @oninput="OnSearchInput" @onkeydown="HandleKeyPress" placeholder="Search or write a note..." />
</div>

<ul>
    @foreach (var note in filteredNotes)
    {
        <li class="note"
            @onmousedown="(e) => OnDragStart(e, note)"
            @ondrop="(e) => OnDrop(e, note)">
            <span class="note-text">@note.Content</span>
            <div class="buttons">
                <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                <button class="delete-button" @onclick="() => DeleteNote(note.Id)">Delete</button>
            </div>
        </li>
    }
</ul>

@code {
    [Parameter] public string folderName { get; set; }
    [Parameter] public string fileName { get; set; }

    private List<Note> notes = new();
    private List<Note> filteredNotes = new();
    private string newNote = "";
    private string currentNoteToEdit = null;
    private string addOrEditButtonText = "Add Note";

    private Note draggedNote = null;  // The note being dragged
    private int dragStartIndex = -1; // Index of the note being dragged

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(folderName) && !string.IsNullOrWhiteSpace(fileName))
        {
            LoadFile(); // Load the file content
        }
    }

    void OnSearchInput(ChangeEventArgs e)
    {
        newNote = e.Value.ToString();
        FilterNotes();
    }

    void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddNoteOrEditNote();
    }

void AddNoteOrEditNote()
{
    if (!string.IsNullOrWhiteSpace(newNote))
    {
        if (!string.IsNullOrEmpty(currentNoteToEdit))
        {
            // Edit existing note by Id
            var noteToEdit = notes.FirstOrDefault(n => n.Id.ToString() == currentNoteToEdit);
            if (noteToEdit != null)
            {
                noteToEdit.Content = newNote;  // Update the content of the note
                currentNoteToEdit = null;  // Reset edit context
                addOrEditButtonText = "Add Note";  // Reset button text
            }
        }
        else
        {
            // Add new note
            notes.Add(new Note(newNote));  // Add a new note with a unique ID
        }

        newNote = "";
        SaveFile();
        FilterNotes();
    }
}

void LoadFile()
{
    try
    {
        if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
        {
            fileName += ".txt";
        }

        var content = FolderService.ReadFileContent(folderName, fileName);
        if (content == null)
        {
            Console.WriteLine("File content is empty or null.");
        }
        else
        {
            Console.WriteLine($"File content loaded: {content.Length} characters.");
        }

        notes = string.IsNullOrWhiteSpace(content) ? new List<Note>() : content.Split('\n')
                .Select(line => new Note(line))  // Create Note objects
                .ToList();
        FilterNotes();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error loading file: {ex.Message}");
    }
}



void SaveFile()
{
    try
    {
        FolderService.SaveFileContent(folderName, fileName, string.Join("\n", notes.Select(n => n.Content)));  // Save the content of each note
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error saving file: {ex.Message}");
    }
}



    void FilterNotes()
    {
        try
        {
            filteredNotes = string.IsNullOrEmpty(newNote) ? notes :
                notes.Where(n => n.Content.Contains(newNote, StringComparison.OrdinalIgnoreCase)).ToList();

            Console.WriteLine($"Filtered notes count: {filteredNotes.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering notes: {ex.Message}");
        }
    }

void EditNote(Note note)
{
    // Set the currentNoteToEdit to the Id of the note being edited
    currentNoteToEdit = note.Id.ToString();
    newNote = note.Content;
    addOrEditButtonText = "Save Changes"; // Change button text to "Save Changes"
}

void DeleteNote(Guid noteId)
{
    var noteToDelete = notes.FirstOrDefault(n => n.Id == noteId);
    if (noteToDelete != null)
    {
        notes.Remove(noteToDelete);
        // FilterNotes();
        SaveFile();
    }
}

private async Task OnDragOver(DragEventArgs e)
    {
        // Call the JavaScript function to prevent default behavior
        await JSRuntime.InvokeVoidAsync("preventDragDefault", e);
    }

void OnDragStart(MouseEventArgs e, Note note)
{
    draggedNote = note; // Store the dragged note
}

void OnDrop(DragEventArgs e, Note targetNote)
{
    if (draggedNote != null && draggedNote != targetNote)
    {
        // Get the indexes of the dragged note and the target note
        int draggedIndex = notes.IndexOf(draggedNote);
        int targetIndex = notes.IndexOf(targetNote);

        // Remove the dragged note from its original position
        notes.RemoveAt(draggedIndex);

        // Insert the dragged note at the new position
        notes.Insert(targetIndex, draggedNote);

        SaveFile(); // Save the updated order
        FilterNotes(); // Reapply filter after reordering
    }
}
}