@page "/note/{folderName}/{fileName}"
@using Notes__.Utilities
@inject FolderService FolderService
@inject LayoutService LayoutService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="input-container">
    <input @bind="newNote" @oninput="OnSearchInput" @onkeydown="HandleKeyPress" placeholder="Search or write a note..." />

    <select @onchange="ChangeCategory">
        <option value="new">None</option>
        <option value="cat1">Cat1</option>
    </select>
    <button @onclick="() => NewCategory(categoryName)">New Category</button>
</div>
<div>
    <button @onclick="() => ToggleBold()"><strong>B</strong></button>
    <button @onclick="() => ToggleItalic()"><i>I</i></button>
</div>

<ul>
    @foreach (var note in filteredNotes)
    {
        @if (bold & italic) 
        {
            var index = filteredNotes.IndexOf(note);
            <li class="note">
                <span class="note-text"><strong><i>@note.Content</i></strong></span>
                <div class="buttons">
                    <button class="bi bi-arrow-up" @onclick="() => MoveNoteUp(index)" disabled="@(index == 0)"></button>
                    <button class="bi bi-arrow-down" @onclick="() => MoveNoteDown(index)" disabled="@(index == filteredNotes.Count - 1)"></button>
                    <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                    <button class="delete-button" @onclick="() => DeleteNote(note.Id)">Delete</button>
                </div>
            </li>
        }else
        {
            if(bold)
            {
                var index = filteredNotes.IndexOf(note);
                <li class="note">
                    <span class="note-text"><strong>@note.Content</strong></span>
                    <div class="buttons">
                        <button class="bi bi-arrow-up" @onclick="() => MoveNoteUp(index)" disabled="@(index == 0)"></button>
                        <button class="bi bi-arrow-down" @onclick="() => MoveNoteDown(index)" disabled="@(index == filteredNotes.Count - 1)"></button>
                        <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                        <button class="delete-button" @onclick="() => DeleteNote(note.Id)">Delete</button>
                    </div>
                </li>
            }else
            {
                if (italic)
                {
                    var index = filteredNotes.IndexOf(note);
                    <li class="note">
                        <span class="note-text"><i>@note.Content</i></span>
                        <div class="buttons">
                            <button class="bi bi-arrow-up" @onclick="() => MoveNoteUp(index)" disabled="@(index == 0)"></button>
                            <button class="bi bi-arrow-down" @onclick="() => MoveNoteDown(index)" disabled="@(index == filteredNotes.Count - 1)"></button>
                            <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                            <button class="delete-button" @onclick="() => DeleteNote(note.Id)">Delete</button>
                        </div>
                    </li>
                }else
                {
                    var index = filteredNotes.IndexOf(note);
                    <li class="note">
                        <span class="note-text">@note.Content</span>
                        <div class="buttons">
                            <button class="bi bi-arrow-up" @onclick="() => MoveNoteUp(index)" disabled="@(index == 0)"></button>
                            <button class="bi bi-arrow-down" @onclick="() => MoveNoteDown(index)" disabled="@(index == filteredNotes.Count - 1)"></button>
                            <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                            <button class="delete-button" @onclick="() => DeleteNote(note.Id)">Delete</button>
                        </div>
                    </li>
                }
            }
        }
    }
</ul>

@code {
    [Parameter] public string folderName { get; set; }
    [Parameter] public string fileName { get; set; }

    private List<Note> notes = new();
    private List<Note> filteredNotes = new();
    private string newNote = "";
    private bool bold = false;
    private bool italic = false;
    private string currentNoteToEdit = null;
    private string currentCategory = null;
    private string addOrEditButtonText = "Add Note";

    protected override void OnParametersSet()
    {
        LayoutService.PageTitle = $"/{folderName}/{fileName}";
    }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(folderName) && !string.IsNullOrWhiteSpace(fileName))
        {
            if (fileName.EndsWith(" - B")) LayoutService.Format = LayoutService.EFormat.BULLETPOINT;
            else if (fileName.EndsWith(" - N")) LayoutService.Format = LayoutService.EFormat.NUMBERED;
            else LayoutService.Format = LayoutService.EFormat.BASIC;
            LoadFile(); // Load the file content
        }
    }

    void OnSearchInput(ChangeEventArgs e)
    {
        newNote = e.Value.ToString();
        FilterNotes();
    }

    void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddNoteOrEditNote();
    }

    void AddNoteOrEditNote()
    {
        if (!string.IsNullOrWhiteSpace(newNote))
        {
            if (!string.IsNullOrEmpty(currentNoteToEdit))
            {
                // Edit existing note by Id
                var noteToEdit = notes.FirstOrDefault(n => n.Id.ToString() == currentNoteToEdit);
                if (noteToEdit != null)
                {
                    switch (LayoutService.Format) // Update the content of the note
                    {
                        case LayoutService.EFormat.BULLETPOINT:
                            noteToEdit.Content = $"• {newNote}";
                            break;
                        case LayoutService.EFormat.NUMBERED:
                            noteToEdit.Content = $"{LayoutService.EditNumber}. {newNote}";
                            break;
                        default:
                            noteToEdit.Content = newNote;
                            break;
                    }
                    currentNoteToEdit = null;  // Reset edit context
                    addOrEditButtonText = "Add Note";  // Reset button text
                }
            }
            else
            {
                switch (LayoutService.Format) // Add new note
                {
                    case LayoutService.EFormat.BULLETPOINT:
                        notes.Add(new Note($"• {newNote}"));
                        break;
                    case LayoutService.EFormat.NUMBERED:
                        notes.Add(new Note($"{notes.Count() + 1}. {newNote}"));
                        break;
                    default:
                        notes.Add(new Note(newNote)); // Add a new note with a unique ID
                        break;
                }
            }

            newNote = "";
            SaveFile();
            FilterNotes();
        }
    }

    void LoadFile()
    {
        try
        {
            if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
            {
                fileName += ".txt";
            }

            var content = FolderService.ReadFileContent(folderName, fileName);
            if (string.IsNullOrWhiteSpace(content))
            {
                Console.WriteLine("File content is empty or null.");
            }
            else
            {
                Console.WriteLine($"File content loaded: {content.Length} characters.");
            }

            notes = string.IsNullOrWhiteSpace(content) ? new List<Note>() : content.Split('\n')
                    .Select(line => new Note(line))  // Create Note objects
                    .ToList();
            FilterNotes();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading file: {ex.Message}");
        }
    }

    void SaveFile()
    {
        try
        {
            FolderService.SaveFileContent(folderName, fileName, string.Join("\n", notes.Select(n => n.Content)));  // Save the content of each note
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving file: {ex.Message}");
        }
    }

    void FilterNotes()
    {
        try
        {
            filteredNotes = string.IsNullOrEmpty(newNote) ? notes :
                notes.Where(n => n.Content.Contains(newNote, StringComparison.OrdinalIgnoreCase)).ToList();

            Console.WriteLine($"Filtered notes count: {filteredNotes.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering notes: {ex.Message}");
        }
    }

    void EditNote(Note note)
    {
        // Set the currentNoteToEdit to the Id of the note being edited
        currentNoteToEdit = note.Id.ToString();
        switch (LayoutService.Format)
        {
            case LayoutService.EFormat.BULLETPOINT:
                newNote = note.Content.Substring(2);
                break;
            case LayoutService.EFormat.NUMBERED:
                int editNumber;
                int.TryParse(note.Content.Substring(0, 1), out editNumber);
                LayoutService.EditNumber = editNumber;
                newNote = note.Content.Substring(2);
                break;
            default:
                newNote = note.Content;
                break;
        }
        addOrEditButtonText = "Save Changes"; // Change button text to "Save Changes"
    }

    void DeleteNote(Guid noteId)
    {
        var noteToDelete = notes.FirstOrDefault(n => n.Id == noteId);
        if (noteToDelete != null)
        {
            notes.Remove(noteToDelete);
            ReorderNumbers();
            SaveFile();
        }
    }

    void MoveNoteUp(int index)
    {
        if (index > 0)
        {
            var temp = filteredNotes[index];
            filteredNotes[index] = filteredNotes[index - 1];
            filteredNotes[index - 1] = temp;
            ReorderNumbers();
            SaveFile();
            FilterNotes();
        }
    }

    void MoveNoteDown(int index)
    {
        if (index < filteredNotes.Count - 1)
        {
            var temp = filteredNotes[index];
            filteredNotes[index] = filteredNotes[index + 1];
            filteredNotes[index + 1] = temp;
            ReorderNumbers();
            SaveFile();
            FilterNotes();
        }
    }

    void ReorderNumbers()
    {
        if (LayoutService.Format == LayoutService.EFormat.NUMBERED)
        {
            for (int i = 0; i < notes.Count(); i++)
            {
                var s = notes[i].Content.Length;
                string n = notes[i].Content.Substring(1, notes[i].Content.Length - 1);
                notes[i].Content = $"{i + 1}{n}";
            }
        }
    }
    void ToggleBold()
    {
        if (bold)
        {
            bold = false;
        }
        else 
        {
            bold = true;
        }
    }
    void ToggleItalic()
    {
        if (italic)
        {
            italic = false;
        }
        else
        {
            italic = true;
        }
    }

    private async Task ChangeCategory(ChangeEventArgs e)
    {
        //var category = e.Value.ToString();

    }

    void NewCategory(categoryName) {
        currentCategory = categoryName;
    }
}
