@page "/note/{folderName}/{fileName}"
@using Notes__.Utilities
@inject FolderService FolderService
@inject LayoutService LayoutService
@inject NavigationManager Navigation

<div class="dropdown">
    <button class="dropbtn" @onclick="ToggleDropdown">New Note Page</button>
    <div class="dropdown-content" style="@(isOpen ? "display: block;" : "display: none;")">
        <button @onclick="CreateBasicNotePage">Create New Basic Note Page</button>
    </div>
</div>

<div class="input-container">
    <input @bind="newNote" @oninput="OnSearchInput" @onkeydown="HandleKeyPress" placeholder="Search or write a note..." />
</div>

<ul>
    @foreach (var note in filteredNotes)
    {
        <li class="note" 
            @key="note"
            @onpointerdown="(e) => OnNoteDragStart(e, note)"
            @onpointermove="(e) => OnNoteDragMove(e, note)"
            @onpointerup="(e) => OnNoteDragEnd(e, note)">
            <span class="note-text">@note</span>
            <div class="buttons">
                <button class="edit-button" @onclick="() => EditNote(note)">Edit</button>
                <button class="delete-button" @onclick="() => DeleteNote(note)">Delete</button>
            </div>
        </li>
    }
</ul>

@code {
    [Parameter] public string folderName { get; set; }
    [Parameter] public string fileName { get; set; }

    private List<string> notes = new();
    private List<string> filteredNotes = new();
    private string newNote = "";
    private string currentNoteToEdit = null;
    private string addOrEditButtonText = "Add Note";
    private bool isOpen = false;

    private string draggedNote = null; // The note being dragged
    private int dragStartIndex = -1; // Index of the note being dragged

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(folderName) && !string.IsNullOrWhiteSpace(fileName))
        {
            LoadFile(); // Load the file content
        }
    }

    private void ToggleDropdown() => isOpen = !isOpen;

    void OnSearchInput(ChangeEventArgs e)
    {
        newNote = e.Value.ToString();
        FilterNotes();
    }

    void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") AddNoteOrEditNote();
    }

    void AddNoteOrEditNote()
    {
        if (!string.IsNullOrWhiteSpace(newNote))
        {
            if (currentNoteToEdit != null)
            {
                int index = notes.IndexOf(currentNoteToEdit);
                notes[index] = newNote;
                currentNoteToEdit = null;
                addOrEditButtonText = "Add Note";
            }
            else
            {
                notes.Add(newNote);
            }
            newNote = "";
            SaveFile();
            FilterNotes();
        }
    }

    void LoadFile()
    {
        try
        {
            if (!fileName.EndsWith(".txt", StringComparison.OrdinalIgnoreCase))
            {
                fileName += ".txt";
            }

            var content = FolderService.ReadFileContent(folderName, fileName);
            if (content == null)
            {
                Console.WriteLine("File content is empty or null.");
            }
            else
            {
                Console.WriteLine($"File content loaded: {content.Length} characters.");
            }

            notes = string.IsNullOrWhiteSpace(content) ? new List<string>() : new List<string>(content.Split('\n'));
            FilterNotes();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading file: {ex.Message}");
        }
    }


    void SaveFile()
    {
        try
        {
            FolderService.SaveFileContent(folderName, fileName, string.Join("\n", notes));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving file: {ex.Message}");
        }
    }


    void FilterNotes()
    {
        try
        {
            filteredNotes = string.IsNullOrEmpty(newNote) ? notes :
                notes.Where(n => n.Contains(newNote, StringComparison.OrdinalIgnoreCase)).ToList();

            Console.WriteLine($"Filtered notes count: {filteredNotes.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering notes: {ex.Message}");
        }
    }


    void EditNote(string note)
    {
        newNote = note;
        currentNoteToEdit = note;
        addOrEditButtonText = "Save Changes";
    }

    void DeleteNote(string note)
    {
        notes.Remove(note);
        SaveFile();
        FilterNotes();
    }

    void CreateBasicNotePage()
    {
        Navigation.NavigateTo($"/note/{folderName}/NewNote{DateTime.Now.Ticks}");
    }

    // Start dragging a note
    void OnNoteDragStart(PointerEventArgs e, string note)
    {
        draggedNote = note;
        dragStartIndex = notes.IndexOf(note);
    }

    // Move the dragged note (optional UI effect can be added)
    void OnNoteDragMove(PointerEventArgs e, string note)
    {
        // Here you could visually show the note being dragged, if desired.
    }

    // Drop the note to reorder
    void OnNoteDragEnd(PointerEventArgs e, string targetNote)
    {
        if (draggedNote != null && draggedNote != targetNote)
        {
            int targetIndex = notes.IndexOf(targetNote);
            // Remove the dragged note and insert it at the target position
            notes.Remove(draggedNote);
            notes.Insert(targetIndex, draggedNote);

            SaveFile(); // Save the updated order to the file
            FilterNotes(); // Refresh the displayed notes list
        }

        // Reset after drag ends
        draggedNote = null;
        dragStartIndex = -1;
    }
}
