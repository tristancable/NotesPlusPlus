@page "/"
@using Notes__.Utilities
@inject FolderService FolderService
@inject LayoutService LayoutService
@inject IJSRuntime JS

<div class="creation-button">
    <input @bind="newFolderName" placeholder="Enter folder name" />
    <button @onclick="CreateFolder">@ButtonText</button>
</div>

<ul class="folder-list">
    @foreach (var folderName in folders)
    {
        <li class="folder-item">
            <span class="folder-text">
            <a href="@($"/folder/{folderName}")" class="folder-link">
                <i class="folder-icon">
                <i class="bi bi-folder"></i>
                </i>
                @folderName
            </a>
            </span>
            <div class="buttons">
                        <input type="checkbox" id="heart">
                        <label for="heart"></label>
                <button class="edit-button" @onclick="() => RenameFolder(folderName)">Edit</button>
                    <button class="delete-button" @onclick="() => DeleteFolder(folderName)">Delete</button>
            </div>
        </li>
    }
</ul>

@code {
    private List<string> folders = new();
    private string newFolderName = string.Empty;
    private string? folderBeingEdited = null;
    private string ButtonText = "Create New Folder";

    protected override void OnInitialized()
    {
        LayoutService.PageTitle = "Your Folders";
        folders = FolderService.GetFolders();
    }

    private void CreateFolder()
    {

        if (string.IsNullOrWhiteSpace(newFolderName)) return;

        if (folderBeingEdited == null)
        {
            FolderService.CreateFolder(newFolderName);

        }
        else
        {

            FolderService.UpdateFolderName(folderBeingEdited, newFolderName);
            folderBeingEdited = null;
        }

        folders = FolderService.GetFolders(); // Refresh folders    
        newFolderName = string.Empty;
        ButtonText = "Create New Folder";

    }


    private void RenameFolder(string folderName)
    {
        newFolderName = folderName;
        folderBeingEdited = folderName;
        ButtonText = "Save Changes";
    }

    async Task DeleteFolder(string folder)
    {
        bool confirmed = await JS.InvokeAsync<bool>("showConfirm", "Are you sure you want to delete this folder?");
        if (confirmed)
        {
            ConfirmedDelete(folder);
        }
    }

    private void ConfirmedDelete(string folder)
    {
        FolderService.DeleteFolder(folder);
        folders = FolderService.GetFolders(); // Refresh the folder list
    }

    protected override async Task OnInitializedAsync()
    {
        var theme = await JS.InvokeAsync<string>("getThemeFromLocalStorage");
        if (!string.IsNullOrEmpty(theme))
        {
            await JS.InvokeVoidAsync("setTheme", theme);
        }
    }

}
